async function getAccountSummary(accountsPromise: Promise<any[]>) {
  const [rowsRes, typesRes, envsRes, langsRes] = await Promise.allSettled([
    accountsPromise,
    getAccountTypeOptionsMap(),
    getEnvironmentOptionsMap(),
    getLanguageOptionsMap()
  ]);

  if (rowsRes.status === "rejected") throw rowsRes.reason;
  if (typesRes.status === "rejected") throw typesRes.reason;
  if (envsRes.status === "rejected") throw envsRes.reason;
  if (langsRes.status === "rejected") throw langsRes.reason;

  const rows = rowsRes.value;
  const accountTypes = typesRes.value as Record<string, string>;
  const hostEnvs     = envsRes.value  as Record<string, string>;
  const languages    = langsRes.value as Record<string, string>;

  // 1) 把数据库结果放进 Map
  const keyOf = (t: string, e: string, l: string) => `${t}|${e}|${l}`;
  const countMap = new Map<string, number>(
    rows.map(r => [ keyOf(r.accountTypeId, r.envId, r.langId), r._count._all ])
  );

  // 2) 用三个 map 生成全组合并补齐 count=0
  const result: any[] = [];
  for (const t of Object.keys(accountTypes)) {
    for (const e of Object.keys(hostEnvs)) {
      for (const l of Object.keys(languages)) {
        result.push({
          accountTypeId: t,
          envId: e,
          langId: l,
          label: `[${accountTypes[t]}] ${hostEnvs[e]} / ${languages[l]}`,
          _count: countMap.get(keyOf(t, e, l)) ?? 0
        });
      }
    }
  }

  return result;
}
